"use strict";

function onGoogleReady() {
    angular.bootstrap(document.body, [ "mapTweetInfoApp" ]);
}

var mapTweetInfoApp = angular.module("mapTweetInfoApp", [ "ngResource", "ngRoute", "searchControllers", "resultsControllers", "historyControllers", "latLngServices", "twitterSearchServices", "mapServices", "historyServices", "ngEnterDirectives", "ui.bootstrap", "ui.map" ]);

mapTweetInfoApp.config([ "$routeProvider", function(a) {
    a.when("/", {
        templateUrl: "partials/search",
        controller: "searchCtrl"
    }).when("/search/:searchId", {
        templateUrl: "partials/searchResults",
        controller: "resultsCtrl"
    }).when("/history", {
        templateUrl: "partials/history",
        controller: "historyCtrl"
    }).when("/about", {
        templateUrl: "partials/about"
    }).otherwise({
        redirectTo: "/"
    });
} ]), $(document).ready(function() {
    $(document).on("click", "[data-toggle=offcanvas]", function() {
        $(".row-offcanvas").toggleClass("active");
    });
});

var historyControllers = angular.module("historyControllers", []);

historyControllers.controller("historyCtrl", [ "$scope", "$modal", "historyFactory", function(a, b, c) {
    a.user = {}, a.submittingRemoveAll = !1, c.retrieveSearchHistory().then(function(a) {
        return angular.forEach(a.geo_searches, function(a) {
            var b = +a.latitude, c = +a.longitude;
            a.latitude = b.toFixed(4), a.longitude = c.toFixed(4);
        }), a;
    }).then(function(b) {
        a.user = b;
    }), a.openConfirmRemoveAll = function() {
        var d = b.open({
            templateUrl: "confirmRemoveAll.html",
            controller: "confirmRemoveCtrl",
            size: "sm"
        });
        d.result.then(function() {
            c.removeAll().then(function(b) {
                (b = "removed") && (a.user.geo_searches = []);
            });
        });
    }, a.performSearch = function(a) {
        c.performSearch(a._id);
    }, a.copyToSearch = function(a) {
        c.copyToSearch(a);
    }, a.removeSearch = function(b) {
        a.submittingRemoveAll = !0, c.removeSearch(b._id).then(function(c) {
            "removed" === c && a.user.geo_searches.splice(a.user.geo_searches.indexOf(b), 1);
        });
    };
} ]), historyControllers.controller("confirmRemoveCtrl", [ "$scope", "$modalInstance", function(a, b) {
    a.confirmRemoveAll = function() {
        b.close();
    }, a.cancel = function() {
        b.dismiss("cancel");
    };
} ]);

var resultsControllers = angular.module("resultsControllers", [ "ngSanitize" ]);

resultsControllers.controller("resultsCtrl", [ "$scope", "$routeParams", "factoryTwitterSearch", "markerFactory", function(a, b, c, d) {
    a.mapOptions = {
        center: new google.maps.LatLng(20, -30),
        zoom: 2,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        streetViewControl: !1,
        panControl: !1,
        zoomControl: !0,
        scaleControl: !1,
        zoomControlOptions: {
            style: google.maps.ZoomControlStyle.SMALL,
            position: google.maps.ControlPosition.LEFT_BOTTOM
        },
        mapTypeControl: !0,
        mapTypeControlOptions: {
            style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
            position: google.maps.ControlPosition.RIGHT_BOTTOM
        },
        styles: [ {
            featureType: "all",
            stylers: [ {
                saturation: 0
            }, {
                hue: "#e7ecf0"
            } ]
        }, {
            featureType: "road",
            stylers: [ {
                saturation: -70
            } ]
        }, {
            featureType: "transit",
            stylers: [ {
                visibility: "off"
            } ]
        }, {
            featureType: "poi",
            stylers: [ {
                visibility: "off"
            } ]
        }, {
            featureType: "water",
            stylers: [ {
                visibility: "simplified"
            }, {
                saturation: -60
            } ]
        } ]
    }, a.myMarkers = [], a.currentMarkerInfo = {}, a.currentMarkerInfo.user = {}, a.searchId = b.searchId, 
    a.search = {}, a.filter = {}, a.results = {}, a.results.tweets = [], a.results.geoTweets = [], 
    a.results.returned = !1, c.getTweetsBySearchId(b.searchId).then(function(b) {
        a.search = b.search;
        var c = +b.search.latitude, e = +b.search.longitude;
        a.search.latitude = c.toFixed(4), a.search.longitude = e.toFixed(4), d.setMyMap(a.myMap), 
        a.results.tweets = b.statuses, angular.forEach(a.results.tweets, function(a) {
            var b = a.created_at.split(" ");
            a.created_at = [ b[1], b[2], b[3], b[5] ].join(" ");
        }), a.results.geoTweets = a.results.tweets.filter(function(a) {
            return null != a.geo;
        });
        for (var f = 0; f < a.results.geoTweets.length; f++) {
            var g = d.createAndAddMarker(a.results.geoTweets[f].geo[0], a.results.geoTweets[f].geo[1]);
            a.results.geoTweets[f].marker = g, a.myMarkers.push(a.results.geoTweets[f].marker);
        }
    }).then(function() {
        if (0 == a.results.geoTweets.length) a.myMap.setCenter({
            lat: +a.search.latitude,
            lng: +a.search.longitude
        }), a.myMap.setZoom(14), a.results.returned = !0; else {
            a.results.returned = !0;
            var b = new google.maps.LatLngBounds();
            a.myMarkers.forEach(function(a) {
                b.extend(a.getPosition());
            }), a.myMap.setCenter(b.getCenter()), a.myMap.fitBounds(b), a.myMap.getZoom() >= 17 && a.myMap.setZoom(16);
        }
    }), a.openMarkerInfo = function(b) {
        a.currentMarkerInfo.marker = b;
        var c = a.results.geoTweets.filter(function(a) {
            return a.marker == b;
        })[0];
        a.currentMarkerInfo.user = c.user, a.currentMarkerInfo.created_at = c.created_at, 
        a.currentMarkerInfo.text = c.text, a.myInfoWindow.open(a.myMap, b);
    }, a.panToMarkerOpenInfo = function(b) {
        a.currentMarkerInfo.user = b.user, a.currentMarkerInfo.created_at = b.created_at, 
        a.currentMarkerInfo.text = b.text, a.currentMarkerInfo.marker = b.marker, a.myInfoWindow.open(a.myMap, b.marker), 
        a.myMap.panTo(b.marker.getPosition());
    };
} ]);

var searchControllers = angular.module("searchControllers", []);

searchControllers.controller("searchCtrl", [ "$scope", "$location", "factoryLatLng", "factoryTwitterSearch", function(a, b, c, d) {
    a.counts = [ {
        label: "25 Tweets",
        value: "25"
    }, {
        label: "50 Tweets",
        value: "50"
    }, {
        label: "75 Tweets",
        value: "75"
    }, {
        label: "150 Tweets",
        value: "150"
    } ], a.search = {}, a.search.query = "", a.search.count = "50", a.search.location = "", 
    a.search.radius = "25", a.search.radiusUnit = "Km", a.search.useCurrentLocation = "Use My Current Location", 
    a.search.usedCurrentLocation = !1, a.search.retrievingCurrentLoc = !1, a.submittingSearch = !1, 
    a.gotLatLng = !1;
    for (var e in b.search()) b.search().hasOwnProperty(e) && (a.search[e] = b.search()[e]);
    a.changeRadiusUnit = function(b) {
        a.search.radiusUnit = b;
    }, a.getGeo = function(b) {
        "" != b && c.getLatLng(b).then(function(b) {
            a.search.latitude = b.geo.lat, a.search.longitude = b.geo.lng, a.search.location = b.formattted_address, 
            a.gotLatLng = !0;
        });
    }, a.queryLocations = function(a) {
        return c.queryLocations(a);
    }, a.getCurrentLocation = function() {
        a.search.retrievingCurrentLoc = !0, a.search.useCurrentLocation = "Retrieving Current Location...", 
        c.getCurrentLocation(function(b) {
            b.notSupported ? a.search.useCurrentLocation = "Unable to use My Location" : (c.reverseGeocode(b.latitude, b.longitude, function(b) {
                a.search.location = b, a.$apply();
            }), a.search.latitude = b.latitude, a.search.longitude = b.longitude, a.search.usedCurrentLocation = !0, 
            a.search.retrievingCurrentLoc = !1, a.search.useCurrentLocation = "Use My Current Location", 
            a.$apply());
        });
    }, a.submitSearch = function() {
        a.submittingSearch = !0, d.postTwitterSearch(a.search);
    };
} ]);

var ngEnterDirectives = angular.module("ngEnterDirectives", []);

ngEnterDirectives.directive("ngEnter", function() {
    return function(a, b, c) {
        b.bind("keydown keypress", function(b) {
            13 === b.which && (a.$apply(function() {
                a.$eval(c.ngEnter);
            }), b.preventDefault());
        });
    };
});

var historyServices = angular.module("historyServices", []);

historyServices.factory("historyFactory", [ "$http", "$location", function(a, b) {
    return {
        removeAll: function() {
            return a.delete("/api/search/all").then(function(a) {
                return 200 === a.status && "removed" === a.data ? "removed" : void 0;
            });
        },
        retrieveSearchHistory: function() {
            return a.get("/api/search/history").then(function(a) {
                return a.data;
            });
        },
        copyToSearch: function(a) {
            b.path("/").search({
                location: a.location,
                radius: a.radius,
                radiusUnit: a.radiusUnit,
                query: a.query,
                latitude: a.latitude,
                longitude: a.longitude
            });
        },
        performSearch: function(a) {
            b.path("/search/" + a);
        },
        removeSearch: function(b) {
            return a.delete("/api/search", {
                params: {
                    searchId: b
                }
            }).then(function(a) {
                return 200 === a.status && "removed" === a.data ? "removed" : void 0;
            });
        }
    };
} ]);

var latLngServices = angular.module("latLngServices", []);

latLngServices.factory("factoryLatLng", [ "$http", function(a) {
    return {
        reverseGeocode: function(a, b, c) {
            var d = new google.maps.Geocoder(), e = new google.maps.LatLng(+a, +b);
            d.geocode({
                latLng: e
            }, function(a, b) {
                if (b == google.maps.GeocoderStatus.OK) {
                    if (a[1]) return void c(a[1].formatted_address);
                    c(a[0].formatted_address);
                }
            });
        },
        getLatLng: function(b) {
            return a.get("http://maps.googleapis.com/maps/api/geocode/json", {
                params: {
                    address: b,
                    sensor: !1
                }
            }).then(function(a) {
                return {
                    geo: a.data.results[0].geometry.location,
                    formattted_address: a.data.results[0].formatted_address
                };
            });
        },
        queryLocations: function(b) {
            return a.get("http://maps.googleapis.com/maps/api/geocode/json", {
                params: {
                    address: b,
                    sensor: !1
                }
            }).then(function(a) {
                var b = [];
                return angular.forEach(a.data.results, function(a) {
                    b.push(a.formatted_address);
                }), b;
            });
        },
        getCurrentLocation: function(a) {
            navigator.geolocation ? navigator.geolocation.getCurrentPosition(function(b) {
                a(b.coords);
            }) : a({
                notSupported: !0
            });
        }
    };
} ]);

var mapServices = angular.module("mapServices", []);

mapServices.factory("markerFactory", [ function() {
    var a = null;
    return {
        setMyMap: function(b) {
            a = b;
        },
        createAndAddMarker: function(b, c) {
            var d = new google.maps.Marker({
                map: a,
                position: new google.maps.LatLng(b, c),
                icon: "../../img/bird_blue_32.png"
            });
            return d;
        },
        getMyMap: function() {
            return a;
        }
    };
} ]);

var twitterSearchServices = angular.module("twitterSearchServices", []);

twitterSearchServices.factory("factoryTwitterSearch", [ "$http", "$location", function(a, b) {
    return {
        postTwitterSearch: function(c) {
            a.post("/api/search", c).success(function(a) {
                var c = a._id;
                b.path("/search/" + c);
            });
        },
        getTweetsBySearchId: function(b) {
            return a.get("/api/search?searchId=" + b).then(function(a) {
                return a.data;
            });
        }
    };
} ]);
//# sourceMappingURL=app.min.map